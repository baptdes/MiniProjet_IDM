-- @path petriNet=/miniProjet.newPetri/petriNet.ecore
-- @path simplepdl=/miniProjet.simplePDL/SimplePDL.ecore

module simplepdlToPetriNet;
create OUT : petriNet from IN : simplepdl;


helper context simplepdl!WorkSequence
def: getEvent() : Integer =
    if self.linkType = #startToStart or self.linkType = #startToFinish then
        3
    else
        4
    endif;

helper context simplepdl!WorkSequence
def: getTarget() : Integer =
    if self.linkType = #startToStart or self.linkType = #finishToStart then
        1
    else
        2
    endif;


rule ProcessToReseau {
    from p : simplepdl!Process
    to reseau : petriNet!Reseau(
        name <- p.name
    )
}

rule WorkDefinitionToPetriNet {
	from wd : simplepdl!WorkDefinition
	to pl1 : petriNet!Place(
		nbJetons <- 1,
		name <- wd.name.concat('WaitToStart'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	),
	tr1 : petriNet!Transition(
		name <- wd.name.concat('TransitionStart'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')),
	arc1 : petriNet!Arc(
		nbTransfered <- 1,
		place <- pl1,
		transition <- tr1,
		PlaceToTransition <- true,
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	),
	pl2 : petriNet!Place(
		name <- wd.name.concat('StartedButNotFinished'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')),
	pl3 : petriNet!Place(
		name <- wd.name.concat('HasStarted'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')),
	pl4 : petriNet!Place(
		name <- wd.name.concat('Finished'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')),
	tr2 : petriNet!Transition(
		name <- wd.name.concat('TransitionFinished'),
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')),
	arc2 : petriNet!Arc(
		nbTransfered <- 1,
		place <- pl2,
		transition <- tr1,
		PlaceToTransition <- false,
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	),
	arc3 : petriNet!Arc(
		nbTransfered <- 1,
		place <- pl3,
		transition <- tr1,
		PlaceToTransition <- false,
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	),
	arc4: petriNet!Arc(
		nbTransfered <- 1,
		place <- pl2,
		transition <- tr2,
		PlaceToTransition <- true,
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	),
	arc5 : petriNet!Arc(
		nbTransfered <- 1,
		place <- pl4,
		transition <- tr2,
		PlaceToTransition <- false,
		reseau <- thisModule.resolveTemp(wd.process, 'reseau')
	)
}

rule NeedToArc {
    from ne : simplepdl!Need
    to arc : petriNet!Arc(
    	name <- 'Need '.concat(ne.QuantityNeeded.toString()),
        nbTransfered <- ne.quantityNeeded,
        place <- thisModule.resolveTemp(ne.ressource ,'pla'),
        transition <- thisModule.resolveTemp(ne.workdefintion ,'tr1'),
        PlaceToTransition <- true,
        reseau <- thisModule.resolveTemp(ne.process, 'reseau')),
	
		arcBack : petriNet!Arc(
    	name <- 'Give back '.concat(ne.QuantityNeeded.toString()),
        nbTransfered <- ne.quantityNeeded,
        place <- thisModule.resolveTemp(ne.ressource ,'pla'),
        transition <- thisModule.resolveTemp(ne.workdefintion ,'tr2'),
        PlaceToTransition <- false,
        reseau <- thisModule.resolveTemp(ne.process, 'reseau') )
}

rule RessourceToPlace {
    from res : simplepdl!Ressource
    to pla : petriNet!Place(
        name <- res.name,
        nbJetons <- res.quantity,
        reseau <- thisModule.resolveTemp(res.process, 'reseau')
    )
}

rule WorkSequenceToArc {
    from ws : simplepdl!WorkSequence
    to arc : petriNet!Arc(
    	name <- ws.linkType.toString(),
        nbTransfered <- 1,
        isReadArc <- true,
        place <- thisModule.resolveTemp(ws.predecessor, 'pl' + ws.getEvent()),
        transition <- thisModule.resolveTemp(ws.successor, 'tr' + ws.getTarget()),
        PlaceToTransition <- true,
        reseau <- thisModule.resolveTemp(ws.process, 'reseau') 
    )
}
