-- @path SimplePDL=/miniProjet.simplePDL/SimplePDL.ecore
-- @path miniProjetpdl=/miniProjet.simplepdl.pdl/model/generated/PDL.ecore

module XTextToSimplePDL;
create OUT : SimplePDL from IN : miniProjetpdl;

-- ... l'en-tête est volontairement omis
-- Note : XPDL = méta-modèle issu de Xtext
-- SPDL = méta-modèle SimplePDL
-- Ce helper n'a pas de contexte. Il est défini au niveau du module.
helper def: convertLinkType(x : miniProjetpdl!WorkSequenceType) : SimplePDL!WorkSequenceType =
if x = #start2start then #s2s
else if x = #start2finish then #s2f
else if x = #finish2start then #f2s
else #f2f
endif endif endif; -- pas de SinonSi en ATL


	

rule XProc2SProc {
from xp : miniProjetpdl!Process
to sp : SimplePDL!Process(
name <- xp.name,
-- Ajouter les enfants, sinon les autres éléments créés seront orphelins !
processElements <- xp.processElements)
}

rule XWD2SWD {
from xwd : miniProjetpdl!WorkDefinition
to swd : SimplePDL!WorkDefinition(name <- xwd.name)
}

rule XWS2SWS {
from xws : miniProjetpdl!WorkSequence
to sws : SimplePDL!WorkSequence(
linkType <- thisModule.convertLinkType(xws.linkType), -- Appel à notre helper
predecessor <- xws.predecessor, -- Conversion/appel de règle implicite
successor <- xws.successor,
need <- xws.need
)
}

rule XG2SG {
	from xg : miniProjetpdl!Guidance
	to wg : SimplePDL!Guidance(
		text <- xg.texte,
		elements <- xg.elements
		)
}
	
rule XR2SR {
	from xr : miniProjetpdl!Ressource
	to wr : SimplePDL!Ressource(
		quantity <- xr.quantity,
		name <- xr.name
		)
}


rule XN2SN {
	from xn : miniProjetpdl!Need
	to wn : 	simplePDL!Need(
		quantityNeeded <- wn.quantityNeeded,
		ressource <- wn.ressource
	)
}


